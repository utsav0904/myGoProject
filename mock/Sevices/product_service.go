// Code generated by MockGen. DO NOT EDIT.
// Source: ./Services/product_service.go

// Package mock_Sevices is a generated GoMock package.
package mock_Sevices

import (
	Models "Interface/Models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductServiceInterface is a mock of ProductServiceInterface interface.
type MockProductServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceInterfaceMockRecorder
}

// MockProductServiceInterfaceMockRecorder is the mock recorder for MockProductServiceInterface.
type MockProductServiceInterfaceMockRecorder struct {
	mock *MockProductServiceInterface
}

// NewMockProductServiceInterface creates a new mock instance.
func NewMockProductServiceInterface(ctrl *gomock.Controller) *MockProductServiceInterface {
	mock := &MockProductServiceInterface{ctrl: ctrl}
	mock.recorder = &MockProductServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductServiceInterface) EXPECT() *MockProductServiceInterfaceMockRecorder {
	return m.recorder
}

// AddNewProduct mocks base method.
func (m *MockProductServiceInterface) AddNewProduct(product Models.Product) (int, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewProduct", product)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// AddNewProduct indicates an expected call of AddNewProduct.
func (mr *MockProductServiceInterfaceMockRecorder) AddNewProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewProduct", reflect.TypeOf((*MockProductServiceInterface)(nil).AddNewProduct), product)
}

// BuyProduct mocks base method.
func (m *MockProductServiceInterface) BuyProduct(quantity Models.Product, id int) (int, int, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyProduct", quantity, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(string)
	return ret0, ret1, ret2
}

// BuyProduct indicates an expected call of BuyProduct.
func (mr *MockProductServiceInterfaceMockRecorder) BuyProduct(quantity, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyProduct", reflect.TypeOf((*MockProductServiceInterface)(nil).BuyProduct), quantity, id)
}

// GetAllProduct mocks base method.
func (m *MockProductServiceInterface) GetAllProduct() []Models.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProduct")
	ret0, _ := ret[0].([]Models.Product)
	return ret0
}

// GetAllProduct indicates an expected call of GetAllProduct.
func (mr *MockProductServiceInterfaceMockRecorder) GetAllProduct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProduct", reflect.TypeOf((*MockProductServiceInterface)(nil).GetAllProduct))
}

// GetAllTransaction mocks base method.
func (m *MockProductServiceInterface) GetAllTransaction() []Models.Bills {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransaction")
	ret0, _ := ret[0].([]Models.Bills)
	return ret0
}

// GetAllTransaction indicates an expected call of GetAllTransaction.
func (mr *MockProductServiceInterfaceMockRecorder) GetAllTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransaction", reflect.TypeOf((*MockProductServiceInterface)(nil).GetAllTransaction))
}

// GetNewProductById mocks base method.
func (m *MockProductServiceInterface) GetProductById(id int) (Models.Product, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", id)
	ret0, _ := ret[0].(Models.Product)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// GetNewProductById indicates an expected call of GetNewProductById.
func (mr *MockProductServiceInterfaceMockRecorder) GetNewProductById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockProductServiceInterface)(nil).GetProductById), id)
}

// GetTop5Products mocks base method.
func (m *MockProductServiceInterface) GetTop5Products() []Models.Bills {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTop5Products")
	ret0, _ := ret[0].([]Models.Bills)
	return ret0
}

// GetTop5Products indicates an expected call of GetTop5Products.
func (mr *MockProductServiceInterfaceMockRecorder) GetTop5Products() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTop5Products", reflect.TypeOf((*MockProductServiceInterface)(nil).GetTop5Products))
}
