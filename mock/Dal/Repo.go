// Code generated by MockGen. DO NOT EDIT.
// Source: ./Dal/Repo.go

// Package mock_Dal is a generated GoMock package.
package mock_Dal

import (
	Models "Interface/Models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductRepoInterface is a mock of ProductRepoInterface interface.
type MockProductRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepoInterfaceMockRecorder
}

// MockProductRepoInterfaceMockRecorder is the mock recorder for MockProductRepoInterface.
type MockProductRepoInterfaceMockRecorder struct {
	mock *MockProductRepoInterface
}

// NewMockProductRepoInterface creates a new mock instance.
func NewMockProductRepoInterface(ctrl *gomock.Controller) *MockProductRepoInterface {
	mock := &MockProductRepoInterface{ctrl: ctrl}
	mock.recorder = &MockProductRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepoInterface) EXPECT() *MockProductRepoInterfaceMockRecorder {
	return m.recorder
}

// AddTransactions mocks base method.
func (m *MockProductRepoInterface) AddTransactions(SaleRecord Models.Bills) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransactions", SaleRecord)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddTransactions indicates an expected call of AddTransactions.
func (mr *MockProductRepoInterfaceMockRecorder) AddTransactions(SaleRecord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransactions", reflect.TypeOf((*MockProductRepoInterface)(nil).AddTransactions), SaleRecord)
}

// CheckAvailabilityById mocks base method.
func (m *MockProductRepoInterface) CheckAvailabilityById(id int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAvailabilityById", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckAvailabilityById indicates an expected call of CheckAvailabilityById.
func (mr *MockProductRepoInterfaceMockRecorder) CheckAvailabilityById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAvailabilityById", reflect.TypeOf((*MockProductRepoInterface)(nil).CheckAvailabilityById), id)
}

// GetAllProduct mocks base method.
func (m *MockProductRepoInterface) GetAllProduct() []Models.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProduct")
	ret0, _ := ret[0].([]Models.Product)
	return ret0
}

// GetAllProduct indicates an expected call of GetAllProduct.
func (mr *MockProductRepoInterfaceMockRecorder) GetAllProduct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProduct", reflect.TypeOf((*MockProductRepoInterface)(nil).GetAllProduct))
}

// GetAllTransaction mocks base method.
func (m *MockProductRepoInterface) GetAllTransaction() []Models.Bills {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransaction")
	ret0, _ := ret[0].([]Models.Bills)
	return ret0
}

// GetAllTransaction indicates an expected call of GetAllTransaction.
func (mr *MockProductRepoInterfaceMockRecorder) GetAllTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransaction", reflect.TypeOf((*MockProductRepoInterface)(nil).GetAllTransaction))
}

// GetProductById mocks base method.
func (m *MockProductRepoInterface) GetProductById(id int) Models.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", id)
	ret0, _ := ret[0].(Models.Product)
	return ret0
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockProductRepoInterfaceMockRecorder) GetProductById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockProductRepoInterface)(nil).GetProductById), id)
}

// GetProductQuantityById mocks base method.
func (m *MockProductRepoInterface) GetProductQuantityById(id int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductQuantityById", id)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetProductQuantityById indicates an expected call of GetProductQuantityById.
func (mr *MockProductRepoInterfaceMockRecorder) GetProductQuantityById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductQuantityById", reflect.TypeOf((*MockProductRepoInterface)(nil).GetProductQuantityById), id)
}

// GetTop5Products mocks base method.
func (m *MockProductRepoInterface) GetTop5Products() []Models.Bills {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTop5Products")
	ret0, _ := ret[0].([]Models.Bills)
	return ret0
}

// GetTop5Products indicates an expected call of GetTop5Products.
func (mr *MockProductRepoInterfaceMockRecorder) GetTop5Products() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTop5Products", reflect.TypeOf((*MockProductRepoInterface)(nil).GetTop5Products))
}

// IncreaseQuantity mocks base method.
func (m *MockProductRepoInterface) IncreaseQuantity(quantity Models.Product, id int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseQuantity", quantity, id)
}

// IncreaseQuantity indicates an expected call of IncreaseQuantity.
func (mr *MockProductRepoInterfaceMockRecorder) IncreaseQuantity(quantity, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseQuantity", reflect.TypeOf((*MockProductRepoInterface)(nil).IncreaseQuantity), quantity, id)
}

// InsertProduct mocks base method.
func (m *MockProductRepoInterface) InsertProduct(product Models.Product) (int, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProduct", product)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// InsertProduct indicates an expected call of InsertProduct.
func (mr *MockProductRepoInterfaceMockRecorder) InsertProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProduct", reflect.TypeOf((*MockProductRepoInterface)(nil).InsertProduct), product)
}

// ReduceQuantity mocks base method.
func (m *MockProductRepoInterface) ReduceQuantity(quantity Models.Product, id int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReduceQuantity", quantity, id)
}

// ReduceQuantity indicates an expected call of ReduceQuantity.
func (mr *MockProductRepoInterfaceMockRecorder) ReduceQuantity(quantity, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReduceQuantity", reflect.TypeOf((*MockProductRepoInterface)(nil).ReduceQuantity), quantity, id)
}
