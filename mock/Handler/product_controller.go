// Code generated by MockGen. DO NOT EDIT.
// Source: ./Handler/product_controller.go

// Package mock_Handler is a generated GoMock package.
package mock_Handler

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockControllerInterface is a mock of ControllerInterface interface.
type MockControllerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockControllerInterfaceMockRecorder
}

// MockControllerInterfaceMockRecorder is the mock recorder for MockControllerInterface.
type MockControllerInterfaceMockRecorder struct {
	mock *MockControllerInterface
}

// NewMockControllerInterface creates a new mock instance.
func NewMockControllerInterface(ctrl *gomock.Controller) *MockControllerInterface {
	mock := &MockControllerInterface{ctrl: ctrl}
	mock.recorder = &MockControllerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerInterface) EXPECT() *MockControllerInterfaceMockRecorder {
	return m.recorder
}

// BuyProduct mocks base method.
func (m *MockControllerInterface) BuyProduct(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BuyProduct", w, r)
}

// BuyProduct indicates an expected call of BuyProduct.
func (mr *MockControllerInterfaceMockRecorder) BuyProduct(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyProduct", reflect.TypeOf((*MockControllerInterface)(nil).BuyProduct), w, r)
}

// CreateProduct mocks base method.
func (m *MockControllerInterface) CreateProduct(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateProduct", w, r)
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockControllerInterfaceMockRecorder) CreateProduct(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockControllerInterface)(nil).CreateProduct), w, r)
}

// GetAllProduct mocks base method.
func (m *MockControllerInterface) GetAllProduct(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAllProduct", w, r)
}

// GetAllProduct indicates an expected call of GetAllProduct.
func (mr *MockControllerInterfaceMockRecorder) GetAllProduct(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProduct", reflect.TypeOf((*MockControllerInterface)(nil).GetAllProduct), w, r)
}

// GetAllTransactions mocks base method.
func (m *MockControllerInterface) GetAllTransactions(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAllTransactions", w, r)
}

// GetAllTransactions indicates an expected call of GetAllTransactions.
func (mr *MockControllerInterfaceMockRecorder) GetAllTransactions(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransactions", reflect.TypeOf((*MockControllerInterface)(nil).GetAllTransactions), w, r)
}

// GetProductById mocks base method.
func (m *MockControllerInterface) GetProductById(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetProductById", w, r)
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockControllerInterfaceMockRecorder) GetProductById(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockControllerInterface)(nil).GetProductById), w, r)
}
